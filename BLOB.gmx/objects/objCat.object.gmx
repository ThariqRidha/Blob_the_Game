<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBrownCat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = 0;
view_yview[0] = 0;

with(objCamera)
{
panX = 0;
panY = 0;
}

var fixture = physics_fixture_create();
physics_fixture_set_circle_shape(fixture, 20);
physics_fixture_set_density(fixture, 0.15);
physics_fixture_set_linear_damping(fixture, 0);
physics_fixture_set_restitution(fixture, 0);
physics_fixture_set_angular_damping(fixture, 0.8);
physics_fixture_set_collision_group(fixture, 1);
physics_fixture_set_friction(fixture, 0.9);
physics_fixture_bind(fixture, id);
physics_fixture_delete(fixture);

image_speed = 0;
image_index = 3;

state = "waiting";
inPult = false;
inOrbit = false;
grav = 1;
killTimer = -1;
hit = false;
trackDotTimer = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objCatapult.loaded = false;

if global.audio SoundPlay(sndCatPop);

switch (sprite_index)
{
case sprBrownCat: part_particles_create(global.partSystem, x, y, global.brownCatParticle, 5); break;
case sprBlackCat: part_particles_create(global.partSystem, x, y, global.blackCatParticle, 5); break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == "waiting"
{
phy_rotation = point_direction(objSmallPlanet.x, y, x, objSmallPlanet.y) + 90;
}

// Lock onto the catapult sling position if this cat has been loaded
if inPult
{
phy_position_x = objCatapult.slingX;
phy_position_y = objCatapult.slingY;
phy_rotation = objCatapult.aimDir;
}


// Enter orbit
if !inOrbit
{
var dis = point_distance(x, objBigPlanet.y, objBigPlanet.x, y);
if dis &lt;= 340
    {
    inOrbit = true;
    }
}
else
{
// In orbit, apply fake gravity
grav += 0.1;
var dir = point_direction(x, objBigPlanet.y, objBigPlanet.x, y);
var xTo = lengthdir_x(grav, dir);
var yTo = lengthdir_y(grav, dir);
physics_apply_force(x, y, xTo, -yTo);
if !hit
    {
    phy_rotation = point_direction(0, phy_speed_y, phy_speed_x, 0);
    image_index += 0.5;
    if image_index &gt;= 3
        {
        image_index = 0;
        }
    }
    else
    {
    image_index = 5;
    }
    //Deactivate orbit if you leave it
var dis = point_distance(x, objBigPlanet.y, objBigPlanet.x, y);
if dis &gt; 340
    {
    inOrbit = false;
    grav = 0;
    }
}


// Record moving speed
var mySpeed = point_distance(0, 0, phy_speed_x, phy_speed_y);
if !hit
{
if mySpeed &gt; 0
    {
    trackDotTimer --;
    if !trackDotTimer
        {
        instance_create(x, y, objTrackDot);
        trackDotTimer = 1;
        }
    }
}


// Destroy cases
if (x &lt; objCamera.leftLimit || y &lt; objCamera.topLimit || x &gt; objCamera.rightLimit || y &gt; objCamera.bottomLimit)
{
instance_destroy();
}

if inOrbit
{
if mySpeed &lt;= 1
    {
    if killTimer &lt; 0
        {    // If timer has not been set
        killTimer = 120;    // Set timer to 2 seconds
        }
    }
    else
    {
    killTimer = -1;         // Timer disabled
    }
}

if killTimer &gt; 0
{
killTimer --;
}
else
{
if killTimer == 0
    {
    instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlant">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parObstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = true;
grav = 1;

if (abs(phy_speed_x) &gt; 1 || abs(phy_speed_y) &gt; 1)
{
other.hp --;
if global.audio
    {
    switch (other.object_index)
        {
        case(objGlassBlock1): SoundPlaySingle(sndGlassImpact); break;
        case(objStoneBlock1): SoundPlaySingle(sndRockImpact); break;
        case(objWoodBlock1): SoundPlaySingle(sndWoodImpact); break;
        case(objStoneSquare1): SoundPlaySingle(sndRockImpact); break;
        case(objWoodSquare1): SoundPlaySingle(sndWoodImpact); break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw event called from catapult object for depth correction
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>61,28</point>
    <point>44,44</point>
  </PhysicsShapePoints>
</object>
